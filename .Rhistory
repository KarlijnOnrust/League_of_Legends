install.packages("httr")
library("httr", lib.loc="C:/Program Files/R/R-3.5.1/library")
dat <- GET("https://euw1.api.riotgames.com/lol/spectator/v3/featured-games?api_key=RGAPI-0bb8e013-0e56-4da1-96ef-9a53fa17eb86")
dat
View(dat)
View(dat)
http_status(dat)
content(dat)
content(dat$headers)
content(dat$content)
content(dat$headers$`accept-ranges`)
install.packages("jsonlite")
library("jsonlite", lib.loc="C:/Program Files/R/R-3.5.1/library")
library("httr", lib.loc="C:/Program Files/R/R-3.5.1/library")
http_type(dat)
dat <- GET("https://euw1.api.riotgames.com/lol/spectator/v3/featured-games?api_key=RGAPI-0bb8e013-0e56-4da1-96ef-9a53fa17eb86")
http_type(dat)
jsonDatText<-content(dat,as="text")
jsonDatText
jsonDatRespParsed<-content(dat,as="parsed")
jsonRespParsed
jsonDatParsed
jsonDatParsed<-content(dat,as="parsed")
dat <- GET("https://euw1.api.riotgames.com/lol/spectator/v3/featured-games?api_key=RGAPI-0bb8e013-0e56-4da1-96ef-9a53fa17eb86")
http_type(dat)
jsonDatText<-content(dat,as="text")
jsonDatParsed<-content(dat,as="parsed")
jsonDatParsed
modJson<-jsonDatParsed$data
modJson<-jsonDatParsed$gameList
modJson
dat <- GET("https://euw1.api.riotgames.com/lol/spectator/v3/featured-games?api_key=RGAPI-0bb8e013-0e56-4da1-96ef-9a53fa17eb86")
http_type(dat)
jsonDatText<-content(dat,as="text")
jsonDatText
jsonDatParsed<-content(dat,as="parsed")
jsonDatParsed
fromJSON(jsonDatParsed)
fromJSON(jsonDatText)
modJson<-jsonDatParsed$gameList
modJson
library("dplyr", lib.loc="C:/Program Files/R/R-3.5.1/library")
modJson%>%bind_rows%>%select(id,first_name,last_name,avatar)
modJson%>%bind_rows%>%select()
modJson%>%bind_rows%>%select(q, w, e, r, t, y)
dat <- GET("https://euw1.api.riotgames.com/lol/spectator/v3/featured-games?api_key=RGAPI-0bb8e013-0e56-4da1-96ef-9a53fa17eb86")
http_type(dat)
mydf <- fromJSON(jsonDatText)
jsonDatText<-content(dat,as="text")
mydf <- fromJSON(jsonDatText)
mydf <- fromJSON(jsonDatText, simplifyVector = FALSE)
mydf <- fromJSON(jsonDatText, simplifyVector = TRUE)
dat <- GET("https://euw1.api.riotgames.com/lol/spectator/v3/featured-games?api_key=RGAPI-0bb8e013-0e56-4da1-96ef-9a53fa17eb86")
http_type(dat)
mydf <- fromJSON(dat)
data <- as.data.frame(mydf)
print(data)
View(data)
dat <- GET("https://euw1.api.riotgames.com/lol/spectator/v3/featured-games?api_key=RGAPI-0bb8e013-0e56-4da1-96ef-9a53fa17eb86")
http_type(dat)
mydf <- fromJSON(dat)
data <- as.data.frame(mydf)
GET
GET
dat <- GET("https://euw1.api.riotgames.com/lol/spectator/v3/featured-games?api_key=RGAPI-0bb8e013-0e56-4da1-96ef-9a53fa17eb86")
http_type(dat)
jsonDatText<-content(dat,as="text")
mydf <- fromJSON(jsonDatText)
View(mydf)
query<-list(page="2")
resp<-GET("https://euw1.api.riotgames.com/lol/spectator/v3/featured-games?api_key=RGAPI-0bb8e013-0e56-4da1-96ef-9a53fa17eb86",query=query)
http_type
http_error(resp)
# Shows raw data which is not structured and readable
jsonRespText<-content(resp,as="text")
jsonRespText
# Structurised data in form of R vectors and lists
jsonRespParsed<-content(resp,as="parsed")
jsonRespParsed
fromJSON(jsonRespText)
modJson<-jsonRespParsed$data #. Access data element of whole list and ignore other vectors
modJson
View(query)
View(resp)
View(jsonRespParsed)
resp<-GET("https://euw1.api.riotgames.com/lol/spectator/v3/featured-games?api_key=RGAPI-0bb8e013-0e56-4da1-96ef-9a53fa17eb86")
dat <- fromJSON(resp)
tex <- content(resp,as="text")
dat <- fromJSON(tex)
View(dat)
json_data <-as.data.frame(dat)
View(json_data)
library(readxl)
All_Champions_Stats <- read_excel("D:/R-learning-curve/Selfmade exersizes/All Champions Stats.xlsx",
sheet = "Base Stats - Alphabetical",
col_types = c("text", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"text", "text", "blank"))
View(All_Champions_Stats)
library("readr", lib.loc="C:/Program Files/R/R-3.5.1/library")
detach("package:readr", unload=TRUE)
install.packages("ggplot2")
library("ggplot2", lib.loc="C:/Program Files/R/R-3.5.1/library")
attach(All_Champions_Stats)
plot("HP", "NAME")
plot(HP, NAME)
plot(All_Champions_Stats$HP, All_Champions_Stats$NAME)
ggplot(All_Champions_Stats, aes(NAME, HP))
ggplot(All_Champions_Stats, aes(HP, NAME))
ggplot(All_Champions_Stats, aes(HP, NAME)) + geom_bar()
ggplot(All_Champions_Stats, aes(HP, NAME)) + geom_bar(HP, NAME)
shiny::runApp('D:/R-learning-curve/Selfmade exersizes/League_of_Legends')
shiny::runApp()
Base_stats <- read_excel("D:/R-learning-curve/Selfmade exersizes/League_of_Legends/All Champions Stats.xlsx", sheet = "Base Stats")
runApp()
runApp('D:/R-learning-curve/Selfmade exersizes/test')
runApp('D:/R-learning-curve/Selfmade exersizes/test')
runApp()
install.packages("shinyWidgets")
library("shinyWidgets", lib.loc="~/R/R-3.5.1/library")
runApp('D:/R-learning-curve/Selfmade exersizes/test')
runApp('D:/R-learning-curve/Selfmade exersizes/test')
runApp()
runApp()
runApp()
ggplot(economics, aes(economics$date, economics$unemploy) + geom_polygon())
ggplot(economics, aes(economics$date, economics$unemploy)) + geom_polygon())
ggplot(economics, aes(economics$date, economics$unemploy)) + geom_polygon()
library(fmsb)
install.packages("fmsb")
library(fmsb)
# Create data: note in High school for Jonathan:
data=as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
colnames(data)=c("math" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physic", "statistic", "sport" )
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
data=rbind(rep(20,10) , rep(0,10) , data)
# The default radar chart proposed by the library:
radarchart(data)
# Custom the radarChart !
radarchart( data  , axistype=1 ,
#custom polygon
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 ,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,20,5), cglwd=0.8,
#custom labels
vlcex=0.8
)
# The default radar chart proposed by the library:
radarchart(data)
# Custom the radarChart !
radarchart( data  , axistype=1 ,
#custom polygon
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 ,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,20,5), cglwd=0.8,
#custom labels
vlcex=0.8
)
runApp()
View(data)
runApp()
runApp()
Champs <- read_excel("All Champions Stats.xlsx", sheet = "NAME")
library(readxl)
Champs <- read_excel("All Champions Stats.xlsx", sheet = "NAME")
shiny::runApp()
library(plotly)
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
